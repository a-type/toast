{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Apollo Typed Query": {
    "scope": "typescriptreact",
    "prefix": "atq",
    "body": [
      "import * as React from 'react';",
      "import { Query, QueryResult } from 'react-apollo';",
      "import gql from 'graphql-tag';",
      "import { ${1:${TM_FILENAME/(.*)Query\\..+$/$1/}} } from 'generated/schema';",
      "",
      "export const Document = gql`",
      "  query $1${2:($3)} {",
      "    $0",
      "  }",
      "`;",
      "",
      "interface $1QueryProps {",
      "  variables?: $1.Variables;",
      "  skip?: boolean;",
      "  children(",
      "    result: QueryResult<",
      "      $1.Query,",
      "      $1.Variables",
      "    >,",
      "  ): React.ReactNode;",
      "}",
      "",
      "const $1Query: React.SFC<$1QueryProps> = props => (",
      "  <Query<$1.Query, $1.Variables> query={Document} {...props} />",
      ");",
      "",
      "export default $1Query;",
      ""
    ]
  },
  "Apollo Typed Mutation": {
    "scope": "typescriptreact",
    "prefix": "atm",
    "body": [
      "import * as React from 'react';",
      "import { Mutation, MutationFn } from 'react-apollo';",
      "import gql from 'graphql-tag';",
      "import { ${1:${TM_FILENAME/(.*)Mutation\\..+$/$1/}} } from 'generated/schema';",
      "",
      "export const Document = gql`",
      "  mutation $1${2:($3)} {",
      "    $0",
      "  }",
      "`;",
      "",
      "interface $1MutationProps {",
      "  variables?: $1.Variables;",
      "  skip?: boolean;",
      "  children(",
      "    mutateFn: MutationFn<",
      "      $1.Mutation,",
      "      $1.Variables",
      "    >,",
      "  ): React.ReactNode;",
      "}",
      "",
      "const $1Mutation: React.SFC<$1MutationProps> = props => (",
      "  <Mutation<$1.Mutation, $1.Variables> mutation={Document} {...props} />",
      ");",
      "",
      "export default $1Mutation;",
      ""
    ]
  },
  "TS React SFC": {
    "scope": "typescriptreact",
    "prefix": "sfc",
    "body": [
      "import React, { SFC } from 'react';",
      "",
      "interface ${1:${TM_FILENAME/(.*)\\..+$/$1/}}Props {",
      "  $2",
      "}",
      "",
      "const $1: SFC<$1Props> = ({ }) => {",
      "  $0",
      "};",
      "",
      "export default $1;"
    ]
  }
}
